/////////////////////////////////////////////////////////////
//
// file included for implementation of async ON Action
// "@(#) $Id: hptPadonAction.body,v 1.1.1.1 2007/07/09 12:47:39 wg8 Exp $"
/////////////////////////////////////////////////////////////

  ACS_SHORT_LOG((LM_INFO, "From DO Calling ON action"));

 /*
  * Request the threadManager to create
  * and spawn the thread for commands
  */

  int ret;
  if (!DO_running)
   {
     
// GCH 2007-01-08
// This was necessary with old kernels (RH-9)
//
//     ACS_SHORT_LOG((LM_INFO,"Loading kernel modules"));
//     ret = ACE_OS::system("/sbin/rmmod joydev >& /dev/null");
//     ret = ACE_OS::system("/sbin/rmmod hid >& /dev/null");
//     ret = ACE_OS::system("/sbin/modprobe hid");
//     ret = ACE_OS::system("/sbin/modprobe joydev");
//     ret = ACE_OS::system("/bin/chmod 777 /dev/input/js0");

     char *devname= "/dev/input/js0";

     if ((wingManDevice = ACE_OS::open(devname, O_RDONLY)) < 0) {
								ACS_SHORT_LOG((LM_INFO, "device /dev/input/js0 open failed"));
                exit(1);
        }

      char axis = 2;
      char buttons = 2;
      int version = 0x000800;
      char name[NAME_LENGTH] = "Unknown";

      ioctl(wingManDevice, JSIOCGVERSION, &version);
      ioctl(wingManDevice, JSIOCGAXES, &axis);
      ioctl(wingManDevice, JSIOCGBUTTONS, &buttons);
      ioctl(wingManDevice, JSIOCGNAME(NAME_LENGTH), name);

      if ( !joystick ) { /* "standard" */
            joystick=&JoystickTypes[0];
            joystick->name=name;
            if ( axis < joystick->axis )
                joystick->axis=axis;
            if ( buttons < joystick->buttons )
                joystick->buttons=buttons;
        }

      ACS_SHORT_LOG((LM_INFO, "Found Joystick: %s Axis: %d Buttons: %d", joystick->name, axis, buttons));
      ACS_SHORT_LOG((LM_INFO, "Driver version is %d.%d.%d.", version >> 16, (version >> 8) & 0xff, version & 0xff));
      DO_running = true;
      ACS_SHORT_LOG((LM_INFO, "resuming workerThread"));
      cob->getThreadManager()->resume("workerThread");
   }
  else 
   {
    ACS_SHORT_LOG((LM_ERROR,"Pad::onAction: Cannot start DO. Check if DO is already running."));
   }
