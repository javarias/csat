/* IDL for Pointing component */

#ifndef _POINTING_IDL_
#define _POINTING_IDL_

#include <baci.idl>
#include <Types.idl>

#pragma prefix "alma"

/**
 * @file Pointing.idl
 * IDL specification for the Pointing module interface.
 * This interface manages the pointing model for the telescope, saving offsets
 * that are queried by Telescope to fix the telescope position
 */
module POINTING_MODULE {

	/** @interface Pointing
	 * Defines the interface for managing the offsets that will be used to
	 * fix the telescope position. This component allows a manual pointing,
	 * by giving it an specific offset. In a future we hope that an
	 * automatic pointing model whould be applied
	 */
	interface Pointing : ACS::ACSComponent
	{

		/** Holds the offset in the altitude direction */
		readonly attribute double altOffset;

		/** Holds the offset in the azimuth direction */
		readonly attribute double azmOffset;

		/**
		 * Adds a manual offset over the current altitude offset
		 * @param degrees The additional offset
		 */
		void offSetAlt(in double degrees);

		/**
		 * Adds a manual offset over the current azimuth offset
		 * @param degrees The additional offset
		 */
		void offSetAzm(in double degrees);

		/**
		 * Obtains the delta values of the pointing model for a given position
		 * in Ra/Dec coordinates
		 * @param p The given position in Ra/Dec coordinates
		 * @param st The current sidereal time
		 */
		TYPES::RadecPos offSet(in TYPES::RadecPos p, in double st);
		
		/**
		 * Obtains the delta values of the pointing model for a given position
		 * in Alt/Az coordinates
		 * @param p The given position in Alt/Az coordinates
		 */
		//TYPES::AltazPos offSet(in TYPES::AltazPos p);

		/**
		 * Resets all the pointing manual corrections
		 */
		void resetAdjusts();

		/**
		 * Adds an observation to the observation list needed by the automatic
		 * pointing model for the calculation of the correction coefficients.
		 * @param p_t The theoretical position, in Ra/Dec coordinates
		 * @param p_e The experimental position, in Ra/Dec coordinates
		 * @param sidereal_time The sidereal time of the experimental observation
		 */
		void addObs(in TYPES::RadecPos p_t, in TYPES::RadecPos p_e, in double sidereal_time);

		/**
		 * Calculates the correction coefficients based on the observation list
		 * for the automatic pointing corrections
		 */
		void calculateCoeffs();

		/**
		 * Enables/disables the manual/automatic pointing
		 * @param state The new state of the pointing model
		 * @param model The pointing model which state will be changed
		 */
		void setState(in boolean state, in TYPES::PointingModel model);

		/**
		 * Returns the state of the given pointing model
		 * @param model The pointing model
		 */
		boolean getState(in TYPES::PointingModel model);

	};

};

#endif /* _POINTING_IDL_ */
