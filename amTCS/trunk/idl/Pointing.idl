/* IDL for Pointing component */

#ifndef _POINTING_IDL_
#define _POINTING_IDL_

#include <baci.idl>
#include <Types.idl>

#pragma prefix "alma"

/**
 * @file Pointing.idl
 * IDL specification for the Pointing module interface.
 * This interface manages the pointing model for the telescope, saving offsets
 * that are queried by Telescope to fix the telescope position
 */
module POINTING_MODULE {

	/** @interface Pointing
	 * Defines the interface for managing the offsets that will be used to
	 * fix the telescope position. This component allows a manual pointing,
	 * by giving it an specific offset. In a future we hope that an
	 * automatic pointing model whould be applied
	 */
	interface Pointing : ACS::ACSComponent
	{

		/** Holds the offset in the altitude direction */
		readonly attribute double altOffset;

		/** Holds the offset in the azimuth direction */
		readonly attribute double azmOffset;

		/**
		 * Adds an offset over the current altitude offset
		 * @param degrees The additional offset
		 */
		void offSetAlt(in double degrees);

		/**
		 * Adds an offset over the current azimuth offset
		 * @param degrees The additional offset
		 */
		void offSetAzm(in double degrees);

		void offSet(in TYPES::RadecPos p, out double ra_delta, out double dec_delta);
		
		void offSet(in TYPES::AltazPos p, out double alt_delta, out double az_delta);

		void resetAdjusts();

		void addObs(in TYPES::RadecPos p_t, in TYPES::RadecPos p_d, in double sidereal_time);

		void calculateCoeffs();

		void setState(in boolean state, in TYPES::PointingModel model);

		boolean getState(in TYPES::PointingModel model);

	};

};

#endif /* _POINTING_IDL_ */
