/* IDL for CSATStatus component */

#ifndef _CSATSTATUS_IDL_
#define _CSATSTATUS_IDL_

#include <acsErrTypeLifeCycle.idl>
#include <baci.idl>
#include <Types.idl>

#pragma prefix "alma"

/**
 * @file CSATStatus.idl
 * IDL specification for the CSATStatus module interface.
 * This interface is the primary connection for external clients
 * that want to control the AmTCS itself, by moving it trough its
 * states, and for getting general information about it.
 */
module CSATSTATUS_MODULE {

	/** Possible states of the amTCS
	 */
	enum TCSStatus {
		STOP,
		STAND_BY,
		CALIBRATING,
		READY,
		AUTOMATIC
	};

	/** @interface CSATStatus
	 * Defines the interface that will be used by external clients to control the
	 * TCS. This interface allow external software to move the TCS trough its statues
	 * and to get important information about it.
	 * Please refer to <a href="https://csrg.inf.utfsm.cl/twiki4/bin/view/ACS/ControlAmateurTelescope">CSAT
	 * project Twiki site</a> for further information.
	 */
	interface CSATStatus : ACS::ACSComponent
	{

		/** Current TCS status */
		readonly attribute TCSStatus status;
		
		/**
		 * Moves the TCS from the "Stop" state to the "Stand-by" state.  In this
		 * step all hardware is initialized (set on). No software components are
		 * initialized yet after on() is called.
		 * @throw LifeCycleEx If the current state is different from "Stop"
		 */
		void on()
		   raises (acsErrTypeLifeCycle::LifeCycleEx);

		/*
		 * Moves the TCS from the "Stand-by" state to the "Stop" state.  This
		 * implies shutting off all posible hardware components.
		 * @throw LifeCycleEx If the current state is different from "Stand-by"
		 */
		void off()
		   raises (acsErrTypeLifeCycle::LifeCycleEx);

		/**
		 * Moves the TCS from the "Stand-by" state to the "Calibrating" state In
		 * this step the telescope is set as uncalibrated, and tunning can be
		 * done in it, until calibration is done.
		 * @throw LifeCycleEx If the current state is different from "Stand-by"
		 */
		void setUncalibrated()
		   raises (acsErrTypeLifeCycle::LifeCycleEx);

		/**
		 * Moves the TCS from the "Calibrating" state to the "Stand-by" state In
		 * this step the telescope is set as calibrated, and we say that is
		 * pointing to a certain position.
		 * 
		 * @param p The position which the telesocope is pointing at
		 * @throw LifeCycleEx If the current state is different from "Calibrating"
		 */
		void setCalibrated()
		   raises (acsErrTypeLifeCycle::LifeCycleEx);

		/**
		 * Moves the TCS from the "Stand-by" state to the "Ready" state.  In this
		 * step the software components are get and configured (this assumes that
		 * the hardware is properly configured). After this call is done, the TCS
		 * is ready to operate.
		 * @throw LifeCycleEx If the current state is different from "Stand-by"
		 */
		void initialize(in ACS::CBvoid cb, in ACS::CBDescIn desc)
		   raises (acsErrTypeLifeCycle::LifeCycleEx);

		/**
		 * Moves the TCS from the "Ready" state to the "Stand-by" state.  In this
		 * step the software components are released and the hardware is not
		 * going to be accessed.
		 * @throw LifeCycleEx If the current state is different from "Ready"
		 */
		void stop(in ACS::CBvoid cb, in ACS::CBDescIn desc)
		   raises (acsErrTypeLifeCycle::LifeCycleEx);

		/**
		 * Moves the TCS from "Ready" to "Automatic" (or viceversa, depending on
		 * the the value of <i>mode</i>). If the TCS is in Automatic mode, then
		 * it uses the scheduler to observe. Otherwise, the observations are
		 * manual.
		 * @throw LifeCycleEx If the current state is different from "Ready" or
		 *                    automatic
		 */
		void setMode(in long mode)
		   raises (acsErrTypeLifeCycle::LifeCycleEx);

		/**
		 * Gets the current position of the telescope, in Ra/Dec and Alt/Az
		 * coordinates.
		 * 
		 * @param p_rd The position ot the telescope in Ra/Dec coordinates
		 * @param p_aa The position of the telescope in Al/Azm coordinates
		 */
		void getPos(out TYPES::RadecPos p_rd, out TYPES::AltazPos p_aa);

		/** 
		 * Get the current state of the TCS
		 */
		TCSStatus getState();

		/**
		 * Get the tracking status of the TCS.
		 */
		boolean getTrackingStatus();

		/**
		 * Get actual slew rate.
		 */
		TYPES::AltazVel getSlewRate();

		/**
		 * Gets the current tracking rate of the telescope, in Ra/Dec velocity
		 */
		TYPES::RadecVel getTrackingRate();

		/**
		 * Gets the safety of moving the telescope to a specific position. This
		 * safety includes moon approach, horizon approach, and more.
		 */
		long getSafety(in TYPES::RadecPos p);

		/**
		 * Stops all hardware devices, and stops the whole system, moving finally
		 * the TCS to the "Stop" state.
		 */
		void EmergencyStop();

		/**
		 * Returns the sidereal time
		 */
		double getSiderealTime();

		/**
		 * Returns the global position, in Alt/Lat
		 */
		TYPES::EarthPos getLocalPos();

		/**
		 * Starts a measurement of the difference between theoretical and
		 * experimental coordinates of an observation. This method should be
		 * called once the telescope has arrived to the desired theoretical
		 * position, and should be ended with a call to the acceptPointingObs
		 * method.
		 * @throw LifeCycleEx If the current state is different from "Calibrating"
		 */
		void addPointingObs()
		   raises (acsErrTypeLifeCycle::LifeCycleEx);

		/**
		 * Finalizes the measurement of differences between theoretical and
		 * experimental coordinates of an observation started with the
		 * addPointingObs method.
		 * @param acceptance true if the observation is accepted, false if not
		 * @throw LifeCycleEx If the current state is different from "Calibrating"
		 */
		void acceptPointingObs(in boolean acceptance)
		   raises (acsErrTypeLifeCycle::LifeCycleEx);
	};

};

#endif /* _CSATSTATUS_IDL_ */
